28ms 13.8mb 用了我自己实现的一个并查集。
思路：
设置一个虚拟节点，遍历整个图，同时将图中值为o的边界节点与虚拟节点相连。
此时将并查集将整个图分为几个由o构成的集合，
遍历这个并查集，将值为o同时不与虚拟节点相连的点改为x即可完成题目。

static const auto _ = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return nullptr;
}();

class uf_set {
public:
	uf_set(std::size_t);
	uf_set() = delete;	
	uf_set(const uf_set&) = delete;
	uf_set& operator=(const uf_set&) = delete;
	~uf_set() = default;

	bool union_set(int, int);
	int find(int);
	bool is_connected(int, int);
	std::size_t get_area_number() const;
private:
	std::vector<int> _parents;
	std::vector<int> _ranks;
	int	_curr_area;
};

inline
uf_set::uf_set(std::size_t n)
{
	_curr_area = n;
	_parents   = std::vector<int>(n + 1, 0);
	_ranks     = std::vector<int>(n + 1, 0);
	for (std::size_t i = 0; i < n + 1; ++i)
		_parents[i] = i;
}

int uf_set::find(int x)
{
	while (x != _parents[x]) {
		auto root = _parents[x];
		_parents[x] = _parents[root];
		x = root;
	}
	return _parents[x];
}

//合并两个节点 返回是否成功
bool uf_set::union_set(int x, int y)
{
	int x_root = find(x);
	int y_root = find(y);
	if (x_root == y_root) {
		return false;
	}
	if (_ranks[x_root] < _ranks[y_root]) {
		_parents[x_root] = y_root;
	}
	else if (_ranks[y_root] < _ranks[x_root]) {
		_parents[y_root] = x_root;
	}
	else if (_ranks[y_root] == _ranks[x_root]) {
		_parents[y_root] = x_root;
		++_ranks[x_root];
	}
	--_curr_area;
	return true;
}

//返回两个节点是否连通
inline
bool uf_set::is_connected(int x, int y)
{
	return find(x) == find(y);
}

//返回当前集合数
inline
std::size_t uf_set::get_area_number() const
{
	return _curr_area;
}

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        if (m == 0) return ;
        int n = board[0].size();
        int virtual_pt = n*m;
        uf_set s(n*m+1);

        auto get_index = [&n](int i, int j) {
            return i*n+j;
        };

        vector<vector<int>> direction = {{1, 0}, {0, 1}};

        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if((i == 0 || j == 0 || i == m-1 || j == n-1) && board[i][j] == 'O'){  
                    auto f = s.union_set(get_index(i, j), virtual_pt);
                }
                for(const auto& dir : direction) {
                    auto next_x = i + dir[0];
                    auto next_y = j + dir[1];
                    if(board[i][j] == 'O') {
                        if(next_x < m && next_y < n && board[next_x][next_y] == 'O') {
                            s.union_set(get_index(i, j), get_index(next_x, next_y));
                        }
                    }
                }
            }
        }

        virtual_pt = s.find(virtual_pt);
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(board[i][j] == 'O' && s.find(get_index(i, j)) != virtual_pt) {
                    board[i][j] = 'X';
                }
            }
        }
    }
};
