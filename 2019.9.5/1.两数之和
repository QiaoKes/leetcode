/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int *ans = (int*)malloc(sizeof(int) * 2);
    for(int i = 0; i < numsSize-1; i++){
        for(int j = i+1; j < numsSize; j++){
            if(nums[i]+nums[j] == target){
                ans[0] = i;
                ans[1] = j;
                *returnSize = 2;
                return ans;
            }
        }
    }
    return ans;
}

//一遍hash表 

/*
 * @lc app=leetcode.cn id=1 lang=cpp
 *
 * [1] 两数之和
 */
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> hashmap;
        vector res(2,-1);
        for(int i = 0; i < nums.size(); i++){
            int temp = target - nums[i];
            //未找到时返回end()迭代器
            if(hashmap.find(temp) != hashmap.end()){
                res[0] = hashmap[temp];
                res[1] = i;
            }
            hashmap[nums[i]] = i;
        }
        return res;
    }
};
