/*
 * @lc app=leetcode.cn id=21 lang=cpp
 *
 * [21] 合并两个有序链表
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 //这代码太下饭了QAQ
 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 && !l2){ return l1; }
        if(!l1 && l2){ return l2; }
        if(!l2 && !l2){ return l1; }

        struct ListNode *l3 = new ListNode(0);
        l3->next = NULL;
        struct ListNode *p = l3;
        struct ListNode *l3_last;
        while(l1 && l2){
            struct ListNode *t = new ListNode(0);
            t->next - NULL;
            l3->next = t;
            l3_last = l3;
            if(l1->val < l2->val){
                l3->val = l1->val;
                l1 = l1->next;
                l3 = l3->next;
            }else if(l1->val > l2-> val){
                l3->val = l2->val;
                l2 = l2->next;
                l3 = l3->next;
            }else{
                l3->val = l1->val;
                l3 = l3->next;
                l3->val = l1->val;
                struct ListNode *tmp = new ListNode(0);
                l3->next = tmp;
                l3_last = l3;
                l1 = l1->next;
                l2 = l2->next;
                l3 = l3->next;  
            } 
        }
        if(l1){
            l3_last->next = l1;
        }
        else if(l2){
            l3_last->next = l2;
        }else{
            l3_last->next = NULL;
        }

        return p;
    }
};

