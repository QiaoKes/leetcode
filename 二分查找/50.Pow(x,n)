class Solution {
public:
    //二分幂递归法
    /*
    double myPow(double x, int n) {
        if (n == 0) return 1;
        if (n == 1) return x;
        bool flag = false;
        long int m = n;
        if (m < 0) {flag = true; m = -m;}
        double ans = Pow(x, m);
        return flag ? 1.0/ans : ans;
    }
    
    double Pow(double x, long int n){
        if (n == 0) return 1;
        if (n == 1) return x;
        double ans=Pow(x, n>>1);
        ans *= ans;
        if (n%2 == 1) {ans *= x;}
        return ans;
    }
    */
    //二分幂迭代法
    double myPow(double x, int n) {
        if (n == 0) return 1;
        if (n == 1) return x;
        bool flag = false;
        long int m = n;
        if (m < 0) {flag = true; m = -m;}
        double sum = 1;
        while (m != 0) {
            if (m%2 == 1) {sum *= x;}
            x *= x;
            m /= 2;
        }
        return flag ? 1.0/sum : sum;
    }
    
};
