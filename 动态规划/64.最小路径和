/*
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
问总共有多少条不同的路径？
1.明确dp数组含义 dp[n][m]代表机器人从[0,0]到[n,m]所有的路径数
2.机器人只能向右或向下故dp[n][m] = dp[n-1][m]+dp[n][m-1];
3.确认边界条件要使 n-1>=0 m-1>=0 所以要确定dp[0][0..m-1](一直向右走) dp[0..n-1][0](一直向下走)
*/
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if (m == 0) return 0;
        int n = grid[0].size();
        if (n == 0) return 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0] = grid[0][0];
        for(int i = 1; i < n; ++i)
            dp[0][i] += dp[0][i-1] + grid[0][i];
        for(int i = 1; i < m; ++i)
            dp[i][0] += dp[i-1][0] + grid[i][0];
        for(int i = 1; i < m; ++i) {
            for(int j = 1; j < n; ++j) {
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
};
