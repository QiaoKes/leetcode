/*
题目描述
将整数n分成k份，且每份不能为空，任意两个方案不相同(不考虑顺序)。

例如：n=7，k=3，下面三种分法被认为是相同的。

1,1,5
1,5,1
5,1,1

问有多少种不同的分法。
*/
/*
这题其实是排列组合里的题，可以把一个数值为n的数当做n个小球，划分的份数k当做k个盒子，那么本题可以转化为“将n个小球放到k个盒子中，小球之间与盒子之间没有区别，并且最后的结果不允许空盒”

将n个小球放到k个盒子中的情况总数 =

a.至少有一个盒子只有一个小球的情况数

+b.没有一个盒子只有一个小球的情况数

这样进行划分是因为这种分类可以使a和b都有能写出来的表达式：

a.因为盒子不加区分，那么1的情况数与“将n-1个小球放到k-1个盒子中”的情况数一样

b.没有一个盒子只有一个小球，那么把每个盒子中拿出来一个小球，对应的是“把(n-k)个小球放到k个盒子中的情况数”

然后将上面的思路化为动态转移方程：

设f[n,k]代表将n个小球放到k个盒子中且没有空盒的情况，那么f[n,k] = f[n-1,k-1] + f[n-k,k]

而当k=1时只有1种方法(小球全部放进1个盒子)
*/
int partition(int n,int m)
{
	if(n < m) {
		return 0;
	}
	else if(n < 1 || m < 1) {
		return 0;
	}
	else if(m == 1) {
		return 1;
	}
	else if(n == m) {
		return 1;
	}
	else {
		return partition(n-m,m)+partition(n-1,m-1);
	}
}


//dfs
#include<cstdio>

int n,k,cnt;

void dfs(int last,int sum,int cur)
{
    if(cur==k)
    {
        if(sum==n) cnt++;
        return;
    }
    for(int i=last;sum+i*(k-cur)<=n;i++)//剪枝，只用枚举到sum+i*(k-cur)<=n为止
        dfs(i,sum+i,cur+1);
}

int main()
{
    scanf("%d%d",&n,&k);
    dfs(1,0,0);
    printf("%d",cnt);
}
