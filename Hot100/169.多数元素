//一遍hash
//时间O(n) 空间O(n)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        size_t t = nums.size() / 2;
        unordered_map<int, int> m;
        for(const auto& n : nums) {
            if(++m[n] > t) return n;
        }
        return -1;
    }
};

//投票法
//假设我国拥有全部人口的一半以上，那么我们与其他国家对抗，
//我国每个人和其他国家一换一，那么到最后剩下的还是我们国家的人。
//时间O(n) 空间O(1)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int cnt = 0, maxn = nums[0];
        for(int i = 0; i < nums.size(); ++i) {
            if (nums[i] == maxn) ++cnt;
            else --cnt;
            if (cnt == 0) maxn = nums[i+1];
        }
        return maxn;
    }
};

//数学方法 众数
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[nums.size()/2];
    }
};
